"use strict";
self["webpackHotUpdatestorybook_js"]("src_stories_Button_jsx",{

/***/ "./src/stories/Button.jsx":
/*!********************************!*\
  !*** ./src/stories/Button.jsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
Object(function webpackMissingModule() { var e = new Error("Cannot find module './button.css'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());



/** Primary UI component for user interaction */ const Button = ({ primary, backgroundColor, size, label, ...props })=>{
    const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {
        type: "button",
        className: [
            'storybook-button',
            `storybook-button--${size}`,
            mode
        ].join(' '),
        style: backgroundColor && {
            backgroundColor
        },
        ...props
    }, label);
};
Button.propTypes = {
    /** Is this the principal call to action on the page? */ primary: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().bool),
    /** What background color to use */ backgroundColor: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string),
    /** How large should the button be? */ size: prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOf([
        'small',
        'medium',
        'large'
    ]),
    /** Button contents */ label: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string).isRequired,
    /** Optional click handler */ onClick: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func)
};
Button.defaultProps = {
    backgroundColor: null,
    primary: false,
    size: 'medium',
    onClick: undefined
};
Button.__docgenInfo = {
    "description": "Primary UI component for user interaction",
    "methods": [],
    "displayName": "Button",
    "props": {
        "backgroundColor": {
            "defaultValue": {
                "value": "null",
                "computed": false
            },
            "description": "What background color to use",
            "type": {
                "name": "string"
            },
            "required": false
        },
        "primary": {
            "defaultValue": {
                "value": "false",
                "computed": false
            },
            "description": "Is this the principal call to action on the page?",
            "type": {
                "name": "bool"
            },
            "required": false
        },
        "size": {
            "defaultValue": {
                "value": "'medium'",
                "computed": false
            },
            "description": "How large should the button be?",
            "type": {
                "name": "enum",
                "value": [
                    {
                        "value": "'small'",
                        "computed": false
                    },
                    {
                        "value": "'medium'",
                        "computed": false
                    },
                    {
                        "value": "'large'",
                        "computed": false
                    }
                ]
            },
            "required": false
        },
        "onClick": {
            "defaultValue": {
                "value": "undefined",
                "computed": true
            },
            "description": "Optional click handler",
            "type": {
                "name": "func"
            },
            "required": false
        },
        "label": {
            "description": "Button contents",
            "type": {
                "name": "string"
            },
            "required": true
        }
    }
};


/***/ })

});
//# sourceMappingURL=src_stories_Button_jsx.0357a631dbb4aa89b8ca.hot-update.js.map